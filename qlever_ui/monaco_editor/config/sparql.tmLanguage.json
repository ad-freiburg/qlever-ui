{
  "name": "SPARQL",
  "scopeName": "source.sparql",
  "fileTypes": [
    "sparql"
  ],
  "patterns": [
    {
      "include": "#regex"
    },
    {
      "include": "#comments"
    },
    {
      "name": "keyword.operator.prefixdecl.sparql",
      "match": "\\b(?i:PREFIX)\\b"
    },
    {
      "name": "keyword.operator.function.sparql",
      "match": "\\b(?i:FILTER|BIND|MAX|SAMPLE|LANG|STR|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|sameTerm|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC|COUNT|SUM|MIN|MAX|AVG|GROUP_CONCAT|SEPARATOR|SUBSTR|REGEX|EXISTS|IN|NOT)\\b"
    },
    {
      "name": "keyword.control.sparql",
      "match": "\\b(?i:BASE|SELECT|DISTINCT|REDUCED|FROM|NAMED|WHERE|UNION|OPTIONAL|MINUS|GRAPH|SERVICE|SILENT|VALUES|AS|GROUP|BY|HAVING|ORDER|DESC|ASC|LIMIT|OFFSET|CONSTRUCT|DESCRIBE|ASK|LOAD|INTO|CLEAR|ALL|NAMED|DEFAULT|DROP|ADD|TO|MOVE|COPY|WITH|USING|CREATE)\\b"
    },
    {
      "name": "constant.language.sparql",
      "match": "\\b(?i:true|false)\\b"
    },
    {
      "name": "constant.numeric",
      "match": "\\b\\d+(\\.\\d+([eE][\\-+]?\\d+)?)?\\b"
    },
    {
      "name": "constant.other.iri.sparql",
      "match": "<([^<>\"{}|^`\\\u0000-\u0020])*>"
    },
    {
      "name": "variable.other.sparql",
      "match": "\\?\\w*\\b"
    },
    {
      "name": "variable.curie.sparql",
      "match": "\\b([a-zA-Z\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF](?:(?:[A-Za-z0-9-\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF]|\\.)*)[A-Za-z0-9-\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF]):((?:[a-zA-Z\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF_]|[0-9]|:|(?:\\u005c)[_~\\.\\-!$&'\\(\\|\\)\\*\\+,;=\\/?#@%])((?:[A-Za-z0-9-\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF]|\\.|:)*(?:[A-Za-z0-9-\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF]|:))?)\\b",
      "captures": {
        "1": {
          "name": "variable.prefix.sparql"
        },
        "2": {
          "name": "variable.reference.sparql"
        }
      }
    },
    {
      "name": "variable.prefix.sparql",
      "match": "\\b[a-zA-Z\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF](?:(?:[A-Za-z0-9-\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF]|\\.)*)[A-Za-z0-9-\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\u00c0-\\u00d6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u10000-\\uEFFFF]:"
    },
    {
      "name": "keyword.symbol.sparql",
      "match": "(\\{|\\}|\\:|\\]|\\[|\\(|\\)|>\\=|<\\=|\\!\\=|<|>|\\=|\\*|\\+|/|\\|\\||\\&\\&|\\!|\\;|\\.)"
    },
    {
      "name": "string.quoted.double.sparql",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    {
      "name": "string.quoted.single.sparql",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    }
  ],
  "repository": {
    "iri": {
      "patterns": [
        {
          "name": "comment.block.sparql",
          "match": "iri"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "(^\\s+)?#",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.cs"
            }
          },
          "end": "$",
          "name": "comment.line.sparql"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.sparql",
      "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "regex": {
      "patterns": [
        {
          "name": "string.regexp.ts",
          "begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([a-z]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ts"
            }
          },
          "end": "(/)([a-z]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ts"
            },
            "2": {
              "name": "keyword.other.ts"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "string.regexp.ts",
          "begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([a-z]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ts"
            }
          },
          "end": "(/)([a-z]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ts"
            },
            "2": {
              "name": "keyword.other.ts"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        }
      ]
    },
    "regexp": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
          "captures": {
            "0": {
              "name": "keyword.other.back-reference.regexp"
            },
            "1": {
              "name": "variable.other.regexp"
            }
          }
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            },
            "5": {
              "name": "meta.assertion.look-behind.regexp"
            },
            "6": {
              "name": "meta.assertion.negative-look-behind.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.no-capture.regexp"
            },
            "2": {
              "name": "variable.other.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    }
  }
}
