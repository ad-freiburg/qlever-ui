# Generated by Django 3.0.2 on 2020-01-19 13:52

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("backend", "0050_auto_20190602_0950"),
    ]

    operations = [
        migrations.AlterField(
            model_name="backend",
            name="alternativeObjectName",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpAlternativeObjectName\').slideToggle();">Need help?</a><div class="helpAlternativeObjectName" style="display: none;">Clause that tells QLever UI the alternativename of an object (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The object that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_altname: The variable that will hold the object\'s alternative name<br>Your clause should end in a dot \'.\' or closing bracket \'}\'<br>Your clause will be used as following:<br>SELECT ?qleverui_altname WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;subject&gt; &lt;predicate&gt; ?qleverui_entity<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>alternative object name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</div>',
                verbose_name="Alternative object name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="alternativePredicateName",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpAlternativePredicateName\').slideToggle();">Need help?</a><div class="helpAlternativePredicateName" style="display: none;">Clause that tells QLever UI the alternative name of a predicate (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The predicate that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_altname: The variable that will hold the predicate\'s alternative name<br>Your clause should end in a dot \'.\' or closing bracket \'}\'<br>Your clause will be used as following:<br>SELECT ?qleverui_altname WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;subject&gt; ?qleverui_entity &lt;object&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>alternative predicate name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</div>',
                verbose_name="Alternative predicate name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="alternativeSubjectName",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpAlternativeSubjectName\').slideToggle();">Need help?</a><div class="helpAlternativeSubjectName" style="display: none;">Clause that tells QLever UI the alternative name of a subject (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The subject that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_altname: The variable that will hold the subject\'s alternative name<br>Your clause should end in a dot \'.\' or closing bracket \'}\'<br>Your clause will be used as following:<br>SELECT ?qleverui_altname WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;?qleverui_entity &lt;predicate&gt; &lt;object&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>alternative subject name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</div>',
                verbose_name="Alternative subject name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="objectName",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpObjectName\').slideToggle();">Need help?</a><div class="helpObjectName" style="display: none;">Clause that tells QLever UI the name of an object (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The object that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_name: The variable that will hold the object\'s name<br>Your clause should end in a dot \'.\' or closing bracket \'}\'<br>Your clause will be used as following:<br>SELECT ?qleverui_name WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;subject&gt; &lt;predicate&gt; ?qleverui_entity<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>object name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</div>',
                verbose_name="Object name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="predicateName",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpPredicateName\').slideToggle();">Need help?</a><div class="helpPredicateName" style="display: none;">Clause that tells QLever UI the name of a predicate (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The predicate that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_name: The variable that will hold the predicate\'s name<br>Your clause should end in a dot \'.\' or closing bracket \'}\'<br>Your clause will be used as following:<br>SELECT ?qleverui_name WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;subject&gt; ?qleverui_entity &lt;object&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>predicate name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</div>',
                verbose_name="Predicate name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="replacePredicates",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.replacePredicates\').slideToggle();">Need help?</a><div class="replacePredicates" style="display: none;">\n        A list of predicates that should be replaced for autocompletion.<br>\n        Each line should consist of a predicate + replacement pair, separated by whitespace.<br>\n        Example:<br>\n        &lt;http://www.w3.org/2000/01/rdf-schema#label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@en@&lt;http://www.w3.org/2000/01/rdf-schema#label&gt;<br>\n        &lt;http://schema.org/name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@en@&lt;http://schema.org/name&gt<br>\n        &lt;http://wikiba.se/ontology#label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@en@&lt;http://wikiba.se/ontology#label&gt;</div>\n        ',
                verbose_name="Replace predicates in autocompletion context.",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="subjectName",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpSubjectName\').slideToggle();">Need help?</a><div class="helpSubjectName" style="display: none;">Clause that tells QLever UI the name of a subject (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The subject that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_name: The variable that will hold the subject\'s name<br>Your clause should end in a dot \'.\' or closing bracket \'}\'<br>Your clause will be used as following:<br>SELECT ?qleverui_name WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;?qleverui_entity &lt;predicate&gt; &lt;object&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>subject name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</div>',
                verbose_name="Subject name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="suggestObjects",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpSuggestObjects\').slideToggle();">Need help?</a><div class="helpSuggestObjects" style="display: none;">Clause that tells QLever UI which objects to suggest from (without prefixes). Only needed for suggestion mode 2 (context insensitive suggestions).<br>Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The objects that we want to suggest from<br>Your clause will be used as following:<br>SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?qleverui_count) WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;<b><em>suggest objects clause</em></b><br>}<br>GROUP BY ?qleverui_entity<br>ORDER BY DESC(?qleverui_count)</div>',
                verbose_name="Suggest objects clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="suggestSubjects",
            field=models.TextField(
                blank=True,
                default="",
                help_text='<a href="javascript:void(0)" onclick="django.jQuery(\'.helpSuggestSubjects\').slideToggle();">Need help?</a><div class="helpSuggestSubjects" style="display: none;">Clause that tells QLever UI which subjects to suggest from (without prefixes). Leave blank if you don\'t want subject suggestions.<br>Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The subjects that we want to suggest from<br>Your clause will be used as following:<br>SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?qleverui_count) WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;<b><em>suggest subjects clause</em></b><br>}<br>GROUP BY ?qleverui_entity<br>ORDER BY DESC(?qleverui_count)</div>',
                verbose_name="Suggest subjects clause",
            ),
        ),
    ]
