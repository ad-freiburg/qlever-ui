# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-04-13 09:27
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("backend", "0046_backend_filterentities"),
    ]

    operations = [
        migrations.AddField(
            model_name="backend",
            name="replacePredicates",
            field=models.TextField(
                blank=True,
                default="",
                help_text="A list of predicates that should be replaced for autocompletion.",
                verbose_name="Replace predicates in autocompletion context",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="filterEntities",
            field=models.BooleanField(
                default=False,
                help_text="Also suggest FILTER for variables that store entity IDs. You can use this if you don't have name relations and your entity IDs and names are equal.",
                verbose_name="Suggest FILTER for entity variables",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="objectName",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Clause that tells QLever UI the name of an object (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The object that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_name: The variable that will hold the object's name<br>Your clause will be used as following:<br>SELECT ?qleverui_name WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;subject&gt; &lt;predicate&gt; ?qleverui_entity<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>object name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}",
                verbose_name="Object name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="predicateName",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Clause that tells QLever UI the name of a predicate (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The predicate that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_name: The variable that will hold the predicate's name<br>Your clause will be used as following:<br>SELECT ?qleverui_name WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;subject&gt; ?qleverui_entity &lt;object&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>predicate name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}",
                verbose_name="Predicate name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="subjectName",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Clause that tells QLever UI the name of a subject (without prefixes). Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The subject that we want to get the name of<br>&nbsp;&nbsp;- &nbsp;?qleverui_name: The variable that will hold the subject's name<br>Your clause will be used as following:<br>SELECT ?qleverui_name WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;?qleverui_entity &lt;predicate&gt; &lt;object&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;OPTIONAL {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><em>subject name clause</em></b><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}",
                verbose_name="Subject name clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="suggestObjects",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Clause that tells QLever UI which objects to suggest from (without prefixes). Only needed for suggestion mode 2 (context insensitive suggestions).<br>Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The objects that we want to suggest from<br>Your clause will be used as following:<br>SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?qleverui_count) WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;<b><em>suggest objects clause</em></b><br>}<br>GROUP BY ?qleverui_entity<br>ORDER BY DESC(?qleverui_count)",
                verbose_name="Suggest objects clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="suggestSubjects",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Clause that tells QLever UI which subjects to suggest from (without prefixes). Leave blank if you don't want subject suggestions.<br>Qlever UI expects the following variables to be used:<br>&nbsp;&nbsp;- &nbsp;?qleverui_entity: The subjects that we want to suggest from<br>Your clause will be used as following:<br>SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?qleverui_count) WHERE {<br>&nbsp;&nbsp;&nbsp;&nbsp;<b><em>suggest subjects clause</em></b><br>}<br>GROUP BY ?qleverui_entity<br>ORDER BY DESC(?qleverui_count)",
                verbose_name="Suggest subjects clause",
            ),
        ),
        migrations.AlterField(
            model_name="backend",
            name="supportedFunctions",
            field=models.TextField(
                blank=True,
                default="asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum",
                help_text="Comma separated list of SPARQL functions supported by the backend. Will be used for function highlighting.",
                verbose_name="Supported functions",
            ),
        ),
        migrations.AlterField(
            model_name="example",
            name="name",
            field=models.CharField(
                help_text="Name of this example to show in the user interface",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="prefix",
            name="name",
            field=models.CharField(
                default="",
                help_text="Please chose the short name of this prefix (e.g. scm)",
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name="prefix",
            name="occurrences",
            field=models.IntegerField(
                default=1,
                help_text="Estimated or calculated occurrences of this prefix (used for ordering).",
            ),
        ),
        migrations.AlterField(
            model_name="prefix",
            name="prefix",
            field=models.CharField(
                default="",
                help_text="Insert the original scope with it's path (e.g. &lt;http://schema.org/&gt;).",
                max_length=200,
            ),
        ),
    ]
